@page "/"
@inject NavigationManager navigationManager
@using Microsoft.AspNetCore.SignalR.Client

<h1>SmartHut Messenger</h1>
<hr />

@if(!ifChatting) 
{
    <p>Ange ditt namn</p>

    <input type="text" maxlength="32" @bind="@userName" />
    <button type="button" @onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span>Anslut</button>

    @if(theMessage != null)
    {
        <div class="invalid-feedback">@theMessage</div>
        <small id="emailhelp" class="form-text text-muted">@theMessage</small>
    }
}

else 
{
    <div class="alert alert-secondary mt-4" role="alert">
        <span class="oi oi-person mr-2" aria-hidden="true"></span>
        <span>Du är ansluten som <b>@userName</b></span>
        <button class="btn btn-sm btn-warning ml-md-auto" @onclick="@DisconnectUser">Koppla ifrån</button>
    </div>

    <div id="scrollbox">
        @foreach(var item in messageList)
        {
            @if(item.IsNotice)
            {
                <div class="alert alert-info">@item.Body</div>
            }
            else 
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
        }

        <hr />
        <textarea class="input-lg" placeholder="Skriv ditt meddelande..." @bind="@newMessage"></textarea>
        <button class="btn btn-default" @onclick="@(() => userNotification(newMessage))">Skicka</button>
    </div>
}

@code {
    private bool ifChatting = false;
    private string userName;
    private string theMessage;
    private string newMessage;

    private List<Message> messageList = new List<Message>();
    
    private string hubUrl;
    private HubConnection hubConnection;

    public async Task Chat() 
    {
        if(string.IsNullOrWhiteSpace(userName))
        {
            theMessage = "Ange ditt namn";

            return;
        };

        try 
        {
            ifChatting = true;
            await Task.Delay(1);

            messageList.Clear();

            string baseUrl = navigationManager.BaseUri;
            hubUrl = baseUrl.TrimEnd('/') + ChatHub.HubUrl;

            hubConnection = new HubConnectionBuilder().WithUrl(hubUrl).Build();

            hubConnection.On<string, string>("SendMessage", sMessage);
                await hubConnection.StartAsync();
                await userNotification($"[Lyssna och Häpna] {userName} har anslutit");
        }
        catch(Exception err)
        {
            theMessage = $"VARNING: Kunde inte ansluta till chatten: {err.Message}";
            ifChatting = false;
        }
    }

    private void sMessage(string name, string message)
    {
        bool isMine = name.Equals(userName, StringComparison.OrdinalIgnoreCase);

        messageList.Add(new Message(name, message, isMine));
        StateHasChanged();
    }

    public async Task DisconnectUser() 
    {
        if(ifChatting)
        {
            await userNotification($"[Lyssna och Häpna] {userName} har kopplats ifrån");

            await hubConnection.StopAsync();
            await hubConnection.DisposeAsync();

            hubConnection = null;
            ifChatting = false;
        }
    }

    public async Task userNotification(string message) 
    {
        if(ifChatting && !string.IsNullOrWhiteSpace(message))
        {
            await hubConnection.SendAsync("sendMessage", userName, message);

            newMessage = string.Empty;
        }
    }

    private class Message 
    {
        public Message(string username, string body, bool mine)
        {
            Username = username;
            Body = body;
            Mine = mine;
        }

        public string Username { get; set; }
        public string Body { get; set;}
        public bool Mine { get; set; }

        public bool IsNotice => Body.StartsWith("[Lyssna och Häpna]");
        public string CSS => Mine ?  "sent" : "received";
    }
 }